{"version":3,"file":"ityped.min.js","sources":["../src/ityped.js"],"sourcesContent":["/**\n * async foreach\n * https://www.npmjs.com/package/async-foreach\n */\nconst forEach = function (a, b, c) {\n  var d = -1,\n    e = a.length >>> 0;\n  (function f(g) {\n    var h,\n      j = g === !1;\n    do\n      ++d;\n    while (!(d in a) && d !== e);\n    if (j || d === e) {\n      c && c(!j, a);\n      return\n    }\n    g = b.call({\n      async: function () {\n        return h = !0,\n        f\n      }\n    }, a[d], d, a),\n    h || f(g)\n  })();\n};\n\n\n/**\n * el is the element\n */\nlet selectedElement,\n  props,\n  /**\n  * creating the cursor\n  */\n  cursor = document.createElement('span');\n  cursor.textContent = '|';\n\n/**\n * @name setProps\n * @description Set the ityped properties configuration\n * @param {Object} config The configuration properties\n * @return {Promise}\n */\nfunction setProps ( config ) {\n  let props = config;\n  props.strings     = config.strings     || ['Put your string here...', 'and Enjoy!']\n  props.typeSpeed   = config.typeSpeed   || 100;\n  props.backSpeed   = config.backSpeed   || 50;\n  props.backDelay   = config.backDelay   || 500;\n  props.startDelay  = config.startDelay  || 500;\n  props.showCursor  = config.showCursor;\n  props.cursorClass = config.cursorClass || 'ityped-cursor';\n  props.loop        = config.loop        || false;\n\n  if (props.showCursor === undefined) props.showCursor = true;\n\n  return Promise.resolve(props);\n}\n/**\n * @name init\n * @param { String || Element } element The element that will receive the strings\n * @param {Object} config The initial configuration\n */\nfunction init(element, config) {\n  typeof element === 'string'\n    ? element = document.querySelector(element)\n    : element = element;\n  setProps(config).then(function(properties){\n    props = properties;\n    element._props = props;\n  // init cursor if needed\n    if (props.showCursor) {\n      initCursorOn(element, props.cursorClass, props.cursorChar ||Â '|');\n    }\n    loopingOnWords(element);\n  })\n}\n\nfunction initCursorOn(element, cursorClass, cursorChar) {\n    const newCursor = cursor.cloneNode();\n    newCursor.classList.add(cursorClass);\n    element.insertAdjacentElement('afterend', newCursor);\n    newCursor.textContent = cursorChar;\n}\n\n/**\n * @name loopingOnWords\n * @description Loop on each string passed\n * @param {HTMLElement} \telement \tThe element to handle the animation on\n * @param {Array} words The array that contain the words\n */\nfunction loopingOnWords(element) {\n  forEach(element._props.strings, function (word, index, arr) {\n    let time = (element._props.typeSpeed * word.length - 1);\n    /**\n     * set the correct time\n     * with the differences of type and back\n     * speed\n     */\n    if (element._props.backSpeed < element._props.typeSpeed) {\n      time -= (element._props.typeSpeed - element._props.backSpeed) * word.length;\n  } else if (element._props.backSpeed > element._props.typeSpeed) {\n      time += (element._props.backSpeed - element._props.typeSpeed) * word.length;\n    }\n    let done = this.async();\n    let len = element._props.strings.length;\n    iterateWords(element, word, index, len).then(function () {\n      setTimeout(function () {\n        done();\n      }, time)\n    })\n  }, function () {\n    if (element._props.loop) {\n      loopingOnWords(element);\n    }\n  });\n}\n/**\n * @name increment\n * @description Increment each letter and append it on element\n * @param {Element} element The Element that will receive the letters\n * @param {String} word The string that will be looped to\n * get each letter\n * @return {Promise}\n */\nfunction increment(element, word) {\n  return new Promise(function (resolve, reject) {\n      let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      let wordIndex = i;\n      let len = word.length;\n      setTimeout(function (i) {\n        appendWord(element, word.charAt(wordIndex));\n        count++;\n        if (count === len - 1) {\n          resolve();\n        }\n      }, element._props.typeSpeed * i);\n    }\n  })\n}\n/**\n * @name appendWord\n * @description Append each letter on Element\n * @param {Element} element The Element that will receive the letter\n * @param {String} word The string that will be appended\n */\nfunction appendWord(element, word) {\n  element.innerHTML += word;\n}\n\n/**\n * @name iterateWords\n * @description Iterate on each word, incrementing and decrementing\n * @param {Element} element The Element that will receive the letters of word\n * @param {String} word The string that is the word\n * @param {Integer} index The index position of the words Array\n * @param {Integer} wordsLengthArray The length of words Array\n * @return {Promise}\n */\nfunction iterateWords(element, word, index, wordsLengthArray) {\n  return new Promise(function (resolve, reject) {\n    increment(element, word)\n      .then(function () {\n        setTimeout(function () {\n          decrement(element, word, index, wordsLengthArray)\n            .then(function () {\n              setTimeout(function(){\n                resolve();\n              }, element._props.startDelay)\n            });\n        }, element._props.backDelay)\n      });\n  });\n}\n/**\n * @name iterateInsideDecrement\n * @description Iterate on each word, inside the decrement function for decrement the word\n * @param {Element} element The Element that will receive the letters of word\n * @param {String} word The string that is the word\n * @param {Integer} len The length of words Array\n * @param {Promise} resolve The Promise.resolve method that will be trigerred when\n * the decrement iteration are finished\n * @return {Promise}\n */\nfunction iterateInsideDecrement(element, word, len, resolve) {\n  for (let i = len; i > 0; i--) {\n    let iteratedI = i, count = len;\n    setTimeout(function (i) {\n      element.innerHTML = word.substring(0, len - iteratedI)\n      count--;\n      if (iteratedI === 1) {\n        resolve();\n      }\n    }, element._props.backSpeed * i);\n  }\n}\n\n/**\n * @name decrement\n * @description decrement the word in the correct case\n * @param {Element} element The Element that will receive the letters of word\n * @param {String} word The string that is the word\n * @param {Integer} index The index of the Array that contain the word\n * @param {Integer} lengthWords The length of words Array\n */\nfunction decrement(element, word, index, lengthWords) {\n  return new Promise(function (resolve, reject) {\n    let len = word.length;\n    // if is the last letter and the last word and no loop\n    if (index + 1 === lengthWords) {\n      if (!element._props.loop) {\n      // when the last word\n        if (element._props.onFinished !== undefined && typeof element._props.onFinished === \"function\"){\n            element._props.onFinished();\n        }\n        element.innerHTML = word;\n      }\n      else if (element._props.loop) {\n        iterateInsideDecrement(element, word, len, resolve);\n      }\n    } else if (index + 1 !== lengthWords) {\n      iterateInsideDecrement(element, word, len, resolve);\n    }\n  })\n}\n\n/**\n * @name destroy\n * @description destroy the onFinished function\n */\nfunction destroy (element) {\n  element._props.onFinished = function(){return void 0};\n}\n\n/**\n * Return the init function\n */\nexport { init, destroy };\n"],"names":["init","element","config","document","querySelector","props","strings","typeSpeed","backSpeed","backDelay","startDelay","showCursor","cursorClass","loop","undefined","Promise","resolve","then","properties","_props","cursorChar","newCursor","cursor","cloneNode","classList","add","insertAdjacentElement","textContent","loopingOnWords","word","index","arr","time","length","done","this","async","len","wordsLengthArray","reject","count","i","wordIndex","innerHTML","charAt","lengthWords","onFinished","iterateInsideDecrement","iteratedI","substring","forEach","a","b","c","d","e","f","g","h","j","call","createElement"],"mappings":"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"}